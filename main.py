from collections import UserDict # –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞—Å—É AddressBook, —â–æ –Ω–∞—Å–ª—ñ–¥—É—î UserDict
from datetime import datetime, timedelta # –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞—Ç–∞–º–∏ —Ç–∞ —á–∞—Å–æ–º
import pickle # –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
import re # –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É email
import textwrap # –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–æ—Ç–∞—Ç–æ–∫, –ø–µ—Ä–µ–Ω–æ—Å—É —Ç–µ–∫—Å—Ç–∞, —â–æ–± –±—É–ª–∞ –∫—Ä–∞—Å–∞ –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ)
import json # –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON

#–°–µ—Ä–µ–ª—ñ–∑–∞—Ü—ñ—è
def save_data(book, filename="addressbook.pkl"):
    with open(filename, "wb") as f:
        pickle.dump(book, f)

def load_data(filename="addressbook.pkl"):
    try:
        with open(filename, "rb") as f:
            return pickle.load(f)
    except FileNotFoundError:
        return AddressBook()

#–æ–ø–∏—Å –∫–ª–∞—Å—ñ–≤
class Field:
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return str(self.value)

class Name(Field):
    def __init__(self, value):
        if not value:
            raise ValueError("‚ö†Ô∏è –Ü–º‚Äô—è —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        super().__init__(value)

class Phone(Field):
    def __init__(self, value):
        if not (len(value) == 10):
            raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ä—ñ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.") 
        super().__init__(value)

class Birthday(Field):
    def __init__(self, value):
        try:
            birthday = datetime.strptime(value, "%d.%m.%Y")
        except ValueError:
            raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ: DD.MM.YYYY")
        self.value = birthday

#–¥–æ–¥–∞–ª–∞ –∫–ª–∞—Å—Å email —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∞  –π–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è
class Email(Field):         
    def __init__(self, value):
        if not re.match(r"^[\w\.-]+@[\w\.-]+\.\w+$", value):
            raise ValueError("–ï–º–º... –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ email. –°–ø—Ä–æ–±—É–π —É —Ñ–æ—Ä–º–∞—Ç—ñ: username@example.com")
        super().__init__(value)

class Address(Field):
    def __init__(self, value):
        if not value:
            raise ValueError("üêç –û–π, –Ω–µ –∑–∞–±—É–≤–∞–π –≤–∫–∞–∑–∞—Ç–∏ –∞–¥—Ä–µ—Å—É!")
        super().__init__(value)

class Record:
    def __init__(self, name):
        self.name = Name(name)     # –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ
        self.phones = []           # —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
        self.email = None          # email –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ
        self.address = None        # –∞–¥—Ä–µ—Å–∞ ‚Äî —Ç–µ–∂ –ø—ñ–∑–Ω—ñ—à–µ
        self.birthday = None       # –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è ‚Äî –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º

    def __str__(self):
        return f"üë§ Contact name: {self.name.value}, üìû phones: {'; '.join(p.value for p in self.phones)}"
    

    def add_phone(self, phone):
        self.phones.append(Phone(phone))   
   
    def add_birthday (self, birthday):
        self.birthday= Birthday(birthday)
    
    def remove_phone(self, phone):
        for p in self.phones:
            if p.value == phone:
                self.phones.remove(p)
                break

    def edit_phone(self, old_phone: str, new_phone: str):
        for i, p in enumerate(self.phones):
            if p.value == old_phone:
                self.phones[i] = Phone(new_phone)
            break

    def find_phone(self, phone: str):
        for p in self.phones:
            if p.value == phone:
                return p
        return None
    
class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record

    def find(self, name):
        return self.data.get(name)  
    
    def delete (self, name):
        if name in self.data:
            del self.data[name]

    def get_upcoming_birthdays(self, days: int = 7): # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, —â–æ –Ω–∞–±–ª–∏–∂–∞—é—Ç—å—Å—è
        today = datetime.today().date()
        upcoming = []

        for record in self.data.values():
            if record.birthday:
                bday = record.birthday.value
                bday_this_year = bday.replace(year=today.year).date()

                if bday_this_year < today:
                    bday_this_year = bday_this_year.replace(year=today.year + 1)

                delta = (bday_this_year - today).days
                if 0 <= delta <= days:
                    upcoming.append(record)

        return upcoming

#  –∫–ª–∞—Å—Å Notes
class NotesName(Field): # –∫–ª–∞—Å –¥–ª—è –Ω–∞–∑–≤–∏ –Ω–æ—Ç–∞—Ç–∫–∏
    def __init__(self, value):
        if not value or not isinstance(value, str):
            raise ValueError("–ù–∞–∑–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∏ –º–∞—î –±—É—Ç–∏ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º.")
        super().__init__(value)

class NoteText(Field): # –∫–ª–∞—Å –¥–ª—è —Ç–µ–∫—Å—Ç—É –Ω–æ—Ç–∞—Ç–∫
    def __init__(self, value):
        if not value or not isinstance(value, str):
            raise ValueError("–¢–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ –º–∞—î –±—É—Ç–∏ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º.")
        super().__init__(value)

class TagNotes(Field): # –∫–ª–∞—Å –¥–ª—è —Ç–µ–≥—ñ–≤ –Ω–æ—Ç–∞—Ç–æ–∫
    def __init__(self, value):
        if value and not isinstance(value, str):
            raise ValueError("–¢–µ–≥ –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º.")
        if value and ',' in value:
            raise ValueError("–ú–æ–∂–Ω–∞ –≤–≤–µ—Å—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω —Ç–µ–≥ –±–µ–∑ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫—ñ–≤.")
        super().__init__(value)

class NoteRecord: # –∫–ª–∞—Å –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–æ—Ç–∞—Ç–∫–∏
    def __init__(self, name, text, tag=None):
        self.name = NotesName(name)
        self.text = NoteText(text)
        self.tag = TagNotes(tag) if tag else None

    def __str__(self): # –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏ —É –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        tag_display = f" [tag: {self.tag.value}]" if self.tag else ""
        return f"üìå Note: {self.name.value}\n{textwrap.fill(self.text.value, width=50)}{tag_display}\n"

    def to_dict(self): # –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏ —É —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É JSON
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è JSON-—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó."""
        return {
            "name": self.name.value,
            "text": self.text.value,
            "tag": self.tag.value if self.tag else None
        }

    @classmethod # –∫–ª–∞—Å–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –∑ —Å–ª–æ–≤–Ω–∏–∫–∞
    def from_dict(cls, data):
        return cls(data["name"], data["text"], data.get("tag"))

class NotesBook(UserDict): # –∫–ª–∞—Å –¥–ª—è –∫–Ω–∏–≥–∏ –Ω–æ—Ç–∞—Ç–æ–∫, —â–æ –Ω–∞—Å–ª—ñ–¥—É—î UserDict
    def add_note(self, record: NoteRecord): # –∫–ª–∞—Å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
        self.data[record.name.value] = record

    def delete_note(self, name): # –∫–ª–∞—Å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
        if name in self.data:
            del self.data[name]
            return True
        return False

    def search_by_name(self, name): # –∫–ª–∞—Å –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ –Ω–∞–∑–≤–æ—é
        return [note for key, note in self.data.items() if name.lower() in key.lower()]

    def search_by_text(self, text): # –∫–ª–∞—Å –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
        return [note for note in self.data.values() if text.lower() in note.text.value.lower()]

    def search_by_tag(self, tag): # –∫–ª–∞—Å –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ —Ç–µ–≥–æ–º
        return [note for note in self.data.values() if note.tag and tag.lower() == note.tag.value.lower()]

    def get_all_notes(self): # –∫–ª–∞—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –Ω–æ—Ç–∞—Ç–æ–∫
        return list(self.data.values())

    def to_list(self): # –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –Ω–æ—Ç–∞—Ç–∫–∏ —É —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É JSON
        return [record.to_dict() for record in self.data.values()]

    def save(self, filename="notes.json"): # –ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ—Ç–∞—Ç–∫–∏ —É JSON-—Ñ–∞–π–ª
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(self.to_list(), f, ensure_ascii=False, indent=2)

    def load(self, filename="notes.json"): # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–æ—Ç–∞—Ç–∫–∏ –∑ JSON-—Ñ–∞–π–ª—É
        try:
            with open(filename, "r", encoding="utf-8") as f:
                notes_list = json.load(f)
            for note_data in notes_list:
                record = NoteRecord.from_dict(note_data)
                self.add_note(record)
        except FileNotFoundError:
            pass  # –§–∞–π–ª —É–ø–µ—Ä—à–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–∞—Ü—é—î–º–æ –∑ –ø–æ—Ä–æ–∂–Ω—å–æ—é –∫–Ω–∏–≥–æ—é

def input_error_contact(func):
    def inner(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ValueError:
            return "üò≥ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –ú–æ–∂–ª–∏–≤–æ, —Ç–∏ –≤–∏–Ω–∞–π—à–ª–∞(-–æ–≤) –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é? –í–≤–µ–¥–∏ help_contacts –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ üòÖ"
        except KeyError:
            return "‚ö†Ô∏è  –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω–æ —ñ–º‚Äô—è. –ú–æ–∂–µ—à —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∫–æ–º–∞–Ω–¥–æ—é 'all', —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤."
        except IndexError:
            return "‚ö†Ô∏è  –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ –∑–∞–±—É–≤(–ª–∞) –≤–∫–∞–∑–∞—Ç–∏ —ñ–º‚Äô—è."
    return inner

def parse_input(user_input):
    cmd, args = user_input.split()
    cmd = cmd.strip().lower()
    return cmd, *args

@input_error_contact
def add_contact(args, book: AddressBook):
    if len(args) < 2:
        raise ValueError("–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É –≤–≤–µ–¥—ñ—Ç—å: add [—ñ–º'—è] [—Ç–µ–ª–µ—Ñ–æ–Ω]")
    name = args[0]
    phone = args[1]
    record = book.find(name)
    
    if record is None:
        record = Record(name)
        book.add_record(record)
        message = f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç {name}."
    else:
        message = f"–ö–æ–Ω—Ç–∞–∫—Ç {name} –≤–∂–µ —ñ—Å–Ω—É—î."

    if phone:
        record.add_phone(phone)
        message += f" –î–æ–¥–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}."
    
    return message

@input_error_contact
def change_contact(args, book: AddressBook):
       name, new_phone = args
       record = book.find(name)
       if record:
           record.phones = []  
           record.add_phone(new_phone)
           return "–ö–æ–Ω—Ç–∞–∫—Ç –∑–º—ñ–Ω–µ–Ω–æ"
       else:
           return "–û–π-–π–æ–π, –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"
       
@input_error_contact
def show_contact(name, book: AddressBook):
    record = book.find(name)
    if record:
        phones = ", ".join([phone.value for phone in record.phones]) if record.phones else "–ù–µ–º–∞—î –Ω–æ–º–µ—Ä—ñ–≤"
        email = record.email.value if record.email else "–ù–µ–º–∞—î email"
        address = record.address.value if record.address else "–ù–µ–º–∞—î –∞–¥—Ä–µ—Å–∏"
        birthday = record.birthday.value.strftime("%d.%m.%Y") if record.birthday else "–ù–µ–º–∞—î –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"

        return (
            f"üìá –ö–æ–Ω—Ç–∞–∫—Ç: {record.name.value}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏: {phones}\n"
            f"üìß Email: {email}\n"
            f"üè† –ê–¥—Ä–µ—Å–∞: {address}\n"
            f"üéÇ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birthday}"
        )
    else:
        return "–û–π-–π–æ–π, –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"

@input_error_contact
def show_all(book: AddressBook):
    if not book.data:
        return "–ö–Ω–∏–≥–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è"

    result = ""
    for record in book.data.values():
        name = record.name.value
        phones = ", ".join(phone.value for phone in record.phones) if record.phones else "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
        birthday = record.birthday.value.strftime("%d.%m.%Y") if record.birthday else "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
        email = record.email.value if record.email else "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
        address = record.address.value if record.address else "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
        result += (
            f"üë§ Name: {name}\n"
            f"üìû Phones: {phones}\n"
            f"üéâ Birthday: {birthday}\n"
            f"üìß Email: {email}\n"
            f"üè† Address: {address}\n"
            "--------------------------------\n"
        )

    return result.strip()

@input_error_contact
def add_birthday(args, book: AddressBook):
    name, birthday = args
    record = book.find(name)
    if record:
        record.add_birthday(birthday)
        return f"–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É {name}."
    else:
        return f"–û–π-–π–æ–π, –∫–æ–Ω—Ç–∞–∫—Ç '{name}'–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"

@input_error_contact
def show_birthday(args, book: AddressBook):
    name = args[0]
    record = book.find(name)
    if record and record.birthday:
        return f"–£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {name} –¥–∞—Ç–∞ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {record.birthday.value.strftime('%d.%m.%Y')}"
    elif record:
        return f"–£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {name} –¥–∞—Ç–∞ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞."
    else:
        return f"–û–π-–π–æ–π, –∫–æ–Ω—Ç–∞–∫—Ç '{name}'–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"

@input_error_contact
def birthdays(args, book: AddressBook):
    try:
        days = int(args[0]) if args else 7
    except ValueError:
        return "‚ö†Ô∏è –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —è–∫ —Ü—ñ–ª–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: birthdays 5"

    upcoming = book.get_upcoming_birthdays(days)
    if not upcoming:
        return f"üéâ –ù—ñ—Ö—Ç–æ –Ω–µ —Å–≤—è—Ç–∫—É—î –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö {days} –¥–Ω—ñ–≤."

    result = f"üéÇ –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {days} –¥–Ω—ñ–≤:\n"
    for record in upcoming:
        date = record.birthday.value.strftime("%d.%m.%Y")
        result += f"üë§ {record.name.value} ‚Äî {date}\n"
    return result.strip()

@input_error_contact
def delete(args, book: AddressBook):
    name = args[0]
    if book.find(name):
        book.delete(name)
        return f"–ö–æ–Ω—Ç–∞–∫—Ç  '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ"
    else:
        return f"–û–π-–π–æ–π, –∫–æ–Ω—Ç–∞–∫—Ç '{name}'–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"

@input_error_contact  
def add_email(args, book: AddressBook):
    name, email = args
    record = book.find(name)
    if record:
        record.email = Email(email)
        return f"Email –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É {name}."
    return "–û–π-–π–æ–π, –∫–æ–Ω—Ç–∞–∫—Ç '{name}'–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"

@input_error_contact
def add_address(args, book: AddressBook):
    if len(args) < 2:
        raise ValueError("–©–æ–± –¥–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: add_address [—ñ–º'—è] [–∞–¥—Ä–µ—Å–∞]")
    name = args[0]
    address = " ".join(args[1:])
    record = book.find(name)
    if record:
        record.address = Address(address)
        return f"–ê–¥—Ä–µ—Å—É –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É {name}."
    return f"–û–π-–π–æ–π, –∫–æ–Ω—Ç–∞–∫—Ç '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"

def help_contacts():
    return """
–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
 
‚Ä¢ add [—ñ–º'—è] [—Ç–µ–ª–µ—Ñ–æ–Ω]        ‚Äì –¥–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç
‚Ä¢ change [—ñ–º'—è] [—Ç–µ–ª–µ—Ñ–æ–Ω]     ‚Äì –∑–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ–Ω—Ç–∞–∫—Ç—É
‚Ä¢ contact [—ñ–º'—è]              ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É
‚Ä¢ all                         ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
‚Ä¢ add_birthday [—ñ–º'—è] [–¥–∞—Ç–∞]  ‚Äì –¥–æ–¥–∞—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
‚Ä¢ show_birthday [—ñ–º'—è]        ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
‚Ä¢ birthdays [–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤]  ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, —â–æ –Ω–∞–±–ª–∏–∂–∞—é—Ç—å—Å—è
‚Ä¢ add_email [—ñ–º'—è] [email]    ‚Äì –¥–æ–¥–∞—Ç–∏ email –∫–æ–Ω—Ç–∞–∫—Ç—É
‚Ä¢ add_address [—ñ–º'—è] [–∞–¥—Ä–µ—Å–∞] ‚Äì –¥–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç–∞–∫—Ç—É
‚Ä¢ delete [—ñ–º'—è]               ‚Äì –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç
‚Ä¢ close, exit                 ‚Äì –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
"""

"""–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∞–º–∏. –í–∫–ª—é—á–∞—î –∫–ª–∞—Å–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –ø–æ—à—É–∫—É —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î UserDict –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –∑—Ä—É—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∏–º–∏. """
def input_error(func): # –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –≤–≤–µ–¥–µ–Ω–Ω—è
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
    return wrapper

def parse_input(user_input):
    # 1) –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ —Å–ø–µ—Ä–µ–¥—É/–∑–∑–∞–¥—É
    # 2) –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Å–ª–æ–≤–∞
    cmd, *args = user_input.strip().split()
    # 3) –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ —Ç–∞ —Ä–µ—à—Ç—É —Å–ª—ñ–≤ —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
    return cmd.lower(), args

@input_error
def add_note(args, book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
    name = args[0] 
    text = " ".join(args[1:-1]) if len(args) > 2 else args[1] # —è–∫—â–æ —Ç–µ–≥ —î, —Ç–æ –±–µ—Ä–µ–º–æ –π–æ–≥–æ —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞—Ä–≥—É–º–µ–Ω—Ç
    tag = args[-1] if len(args) > 2 else None # —è–∫—â–æ —Ç–µ–≥ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, —Ç–æ None
    record = NoteRecord(name, text, tag) 
    book.add_note(record)
    return f"–ù–æ—Ç–∞—Ç–∫—É '{name}' –¥–æ–¥–∞–Ω–æ."

@input_error
def delete_note(args, book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
    name = args[0] 
    if book.delete_note(name):  
        return f"–ù–æ—Ç–∞—Ç–∫—É '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ." 
    return f"–û–π-–π–æ–π, –Ω–æ—Ç–∞—Ç–∫—É '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"

@input_error
def edit_name(args, book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –Ω–æ—Ç–∞—Ç–∫–∏
    if len(args) < 2:
        raise ValueError("–í–∫–∞–∂–∏ —Å—Ç–∞—Ä—É —Ç–∞ –Ω–æ–≤—É –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏.\n–ü—Ä–∏–∫–ª–∞–¥: edit_name [—Å—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞] [–Ω–æ–≤–∞ –Ω–∞–∑–≤–∞]")
    old_name, new_name = args[0], args[1]
    if old_name not in book.data:
        return f"–û–π-–π–æ–π, –Ω–æ—Ç–∞—Ç–∫—É –∑ –Ω–∞–∑–≤–æ—é '{old_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"
    note = book.data.pop(old_name)
    note.name.value = new_name
    book.data[new_name] = note
    return f"–ù–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–º—ñ–Ω–µ–Ω–æ –∑ '{old_name}' –Ω–∞ '{new_name}'."

@input_error
def edit_text(args, book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–æ—Ç–∞—Ç–∫–∏
    if len(args) < 2:
        raise ValueError("–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏ —Ç–∞ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç.\n–ü—Ä–∏–∫–ª–∞–¥: edit_text [–Ω–∞–∑–≤–∞] [–Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç]")
    name = args[0]
    new_text = " ".join(args[1:])
    if name not in book.data:
        return f"–û–π-–π–æ–π, –Ω–æ—Ç–∞—Ç–∫—É '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"
    book.data[name].text.value = new_text
    return f"–¢–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ '{name}' —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ."

@input_error
def show_notes(book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –Ω–æ—Ç–∞—Ç–æ–∫
    notes = book.get_all_notes()
    if not notes:
        return "–ö–Ω–∏–≥–∞ –Ω–æ—Ç–∞—Ç–æ–∫ –ø–æ—Ä–æ–∂–Ω—è."
    return "\n".join(str(note) for note in notes)

@input_error
def search_note(args, book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ –Ω–∞–∑–≤–æ—é
    keyword = " ".join(args)
    results = book.search_by_name(keyword)
    return "\n".join(str(note) for note in results) if results else "–û–π-–π–æ–π, —à–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖall –ù–æ—Ç–∞—Ç–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

@input_error
def search_note_text(args, book: NotesBook):  # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
    keyword = " ".join(args)
    results = book.search_by_text(keyword)
    return "\n".join(str(note) for note in results) if results else "–û–π-–π–æ–π, —à–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ –ù–æ—Ç–∞—Ç–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º."

@input_error
def search_tag(args, book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ —Ç–µ–≥–æ–º - –±–æ–Ω—É—Å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    keyword = args[0]
    results = book.search_by_tag(keyword)
    return "\n".join(str(note) for note in results) if results else "–û–π-–π–æ–π, —à–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ –ù–æ—Ç–∞—Ç–∫–∏ –∑ —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

@input_error # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ –Ω–æ—Ç–∞—Ç–æ–∫ - –±–æ–Ω—É—Å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
def sort_tags(book: NotesBook):
    notes = book.get_all_notes()
    tags = [note.tag.value for note in notes if note.tag and note.tag.value]
    if not tags:
        return "üì¶ –£–ø—Å! –°—Ö–æ–∂–µ, —Ü–µ–π —Ç–µ–≥ –¥–µ—Å—å —Å—Ö–æ–≤–∞–≤—Å—è –º—ñ–∂ —Ä—è–¥–∫–∞–º–∏ –∫–æ–¥—É –∞–±–æ –≤–∏–ø–∏–≤ –≤—Å—é –∫–∞–≤—É—Å—é... –ú–∏ –π–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ üòÖ"
    sorted_tags = sorted(set(tags), key=str.lower)
    return "üìö –í—Å—ñ —Ç–µ–≥–∏ —É –Ω–æ—Ç–∞—Ç–∫–∞—Ö (–≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É):\n" + "\n".join(f"‚Ä¢ {tag}" for tag in sorted_tags)

def show_help(): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–∏ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    return """
 –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ Notes:

‚Ä¢ help                             ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
‚Ä¢ add [–Ω–∞–∑–≤–∞] [—Ç–µ–∫—Å—Ç] [—Ç–µ–≥]        ‚Äì –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É
‚Ä¢ edit_name [—Å—Ç–∞—Ä–∞] [–Ω–æ–≤–∞ –Ω–∞–∑–≤–∞]   ‚Äì –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏
‚Ä¢ edit_text [–Ω–∞–∑–≤–∞] [–Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç]  ‚Äì –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏
‚Ä¢ all                              ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏
‚Ä¢ delete [–Ω–∞–∑–≤–∞]                   ‚Äì –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É –∑–∞ –Ω–∞–∑–≤–æ—é
‚Ä¢ search [—á–∞—Å—Ç–∏–Ω–∞ –Ω–∞–∑–≤–∏]           ‚Äì –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é –Ω–æ—Ç–∞—Ç–∫–∏
‚Ä¢ search_notes [–∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ]     ‚Äì –ø–æ—à—É–∫ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º –Ω–æ—Ç–∞—Ç–∫–∏
‚Ä¢ search_tag [—Ç–µ–≥]                 ‚Äì –ø–æ—à—É–∫ –∑–∞ —Ç–µ–≥–æ–º –Ω–æ—Ç–∞—Ç–∫–∏
‚Ä¢ sort_tags                        ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–µ–≥–∏, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º
‚Ä¢ exit / close                     ‚Äì –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –Ω–æ—Ç–∞—Ç–∫–∞–º–∏, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
"""

def main_menu():
    while True:
        print("\nüìÅ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        print("1. –ö–Ω–∏–≥–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤")
        print("2. –ë–ª–æ–∫–Ω–æ—Ç (Notes)")
        print("3. –í–∏—Ö—ñ–¥")

        choice = input("üëâ –í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é (1/2/3): ")

        if choice == "1":
            main_contacts()
        elif choice == "2":
            main_notes()
        elif choice == "3":
            # print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            print("üêç Snaky sisters —à–∏–ø–ª—è—Ç—å —Ç–æ–±—ñ: üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! –Ü –Ω–µ –∑–∞–±—É–≤–∞–π ‚Äî Python –∑–∞–≤–∂–¥–∏ –¥–µ—Å—å –ø–æ—Ä—É—á.")
            break
        else:
            print("‚õî –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

print("üëã –í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ —É —Å–≤—ñ—Ç—ñ Snaky sisters üêç! –¢—É—Ç –∫–æ–¥ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∞—Ü—é—î ‚Äî –≤—ñ–Ω —Ç–∞–Ω—Ü—é—î!")

def main_contacts():
    book = load_data()
    print("üìñ –ö–Ω–∏–≥–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ ‚Äì –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!")
    print("üí° –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—å–æ–≥–æ –ø–µ—Ä–µ–ª—ñ–∫—É –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥—ñ—Ç—å: help_contacts")
    while True:
        user_input = input("--> ")
        command, args = parse_input(user_input)

        if command in ["close", "exit"]:
            save_data(book)
            print("üëã –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤! –î–æ –Ω–æ–≤–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π! üêç")
            break

        elif command == "help_contacts":
            print(help_contacts())

        elif command == "add":
            print(add_contact(args, book))

        elif command == "change":
            print(change_contact(args, book))

        elif command == "contact":
            print (show_contact (args[0], book))

        elif command == "all":
            print (show_all (book))

        elif command == "add_birthday":
            print (add_birthday (args, book))

        elif command == "show_birthday":
            print (show_birthday (args, book))

        elif command == "birthdays":
            print (birthdays (args, book))

        elif command == "add_email":
            print(add_email(args, book))

        elif command == "add_address":
            print(add_address(args, book))    
        
        elif command == "delete":
            print ( delete (args, book))    

        else:
            print("üò≥ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –ú–æ–∂–ª–∏–≤–æ, —Ç–∏ –≤–∏–Ω–∞–π—à–ª–∞(-–æ–≤) –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é? –í–≤–µ–¥–∏ help_contacts –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ üòÖ")

def main_notes(): # –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏
    notes = NotesBook() 
    notes.load() # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ—Ç–∞—Ç–∫–∏ –∑ —Ñ–∞–π–ª—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
    print("üëã –í—ñ—Ç–∞—î–º–æ –≤ –±–ª–æ–∫–Ω–æ—Ç—ñ Notes üêç –≤—ñ–¥ Snaky sisters!")
    print("üí° –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—å–æ–≥–æ –ø–µ—Ä–µ–ª—ñ–∫—É –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥—ñ—Ç—å: help")

    while True:
        user_input = input("--> ")

        command, args = parse_input(user_input)

        match command: # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ match-case –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥
            case "add":
                print(add_note(args, notes))
                notes.save() # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ—Ç–∞—Ç–∫–∏ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
            case "delete":
                print(delete_note(args, notes))
                notes.save() # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ—Ç–∞—Ç–∫–∏ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        
            case "edit_name": # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –Ω–æ—Ç–∞—Ç–∫–∏
                print(edit_name(args, notes))
                notes.save()

            case "edit_text": # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–æ—Ç–∞—Ç–∫–∏
                print(edit_text(args, notes))
                notes.save()

            case "search": # –ü–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞–∑–≤–∏
                print(search_note(args, notes))

            case "search_notes": # –ü–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
                print(search_note_text(args, notes))

            case "search_tag":  # –ü–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ —Ç–µ–≥–æ–º - –±–æ–Ω—É—Å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
                print(search_tag(args, notes))

            case "sort_tags": # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ –Ω–æ—Ç–∞—Ç–æ–∫ - –±–æ–Ω—É—Å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
                print(sort_tags(notes))

            case "all": # –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏
                print(show_notes(notes))

            case "exit" | "close": # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏
                print("üëã –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–ª–æ–∫–Ω–æ—Ç—É Notes! –î–æ –Ω–æ–≤–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π! üêç")
                break
            case "help": # –í–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–∏ –∑ —É—Å—ñ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
                print( show_help())

            case _: # –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö (–ø–æ–º–∏–ª–∫–æ–≤–∏—Ö) –∫–æ–º–∞–Ω–¥
                print("üò≥ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –ú–æ–∂–ª–∏–≤–æ, —Ç–∏ –≤–∏–Ω–∞–π—à–ª–∞(-–æ–≤) –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é? –í–≤–µ–¥–∏ help –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ üòÖ")
        
if __name__ == "__main__":

    main_menu()      